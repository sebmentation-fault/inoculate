# Generated by Django 5.0 on 2024-03-13 12:34

from django.db import migrations

"""
This file is intended to be run when the server is started for the first time, and the database is empty.
It will populate the database with the necessary data (extracted from a CSV file) such that there is a range of option
selections, disinformation tactics, and tactic explanations.
"""

import csv
from random import randint
from prebunkapi.models.modles import (DisinformationTacticModel, OptionSelectionModel, OptionSelectionTacticModel,
                                      TacticExplainationModel)

def load_data_from_csv(csv_dict: dict, delimiter: str, source_url: str):
    with open(csv_dict['path'], 'r', encoding='utf-8') as file:
        reader = csv.DictReader(file, delimiter=delimiter)

        # Create the disinformation tactic model and the explanations for it
        disinformation_tactic = DisinformationTacticModel(
            name=csv_dict['tactic'],
            description=csv_dict['description'],
        )
        disinformation_tactic.save()

        for explanation in csv_dict['explanations']:
            tactic_explanation = TacticExplainationModel(
                disinformation_tactic=disinformation_tactic,
                explaination=f"# Tactic Explanation\n\n {explanation}",
            )
            tactic_explanation.save()

        for row in reader:
            # Create a new option selection model for each row
            # CSV format: information|source|correct_option|incorrect_option|display_not_sure|feedback

            random_difficulty = randint(80, 120)
            random_cost = randint(1, 3)

            feedback_str = row['feedback']

            option_selection = OptionSelectionModel(
                information=row['information'],
                source=row['source'],
                correct_option=row['correct_option'],
                incorrect_option=row['incorrect_option'],
                display_not_sure=True if row['display_not_sure'] == 'True' else False,
                feedback=f'# Feedback\n\n{feedback_str}',
                real_difficulty=random_difficulty,
                opportunity_cost=random_cost,
                source_url=source_url,
            )
            option_selection.save()

            option_selection_tactic = OptionSelectionTacticModel(
                option_selection=option_selection,
                disinformation_tactic=disinformation_tactic,
            )
            option_selection_tactic.save()


def load_data(apps, schema_editor):
    csv_delimiter = '|'
    source_url = 'https://chat.openai.com/'

    csv_disinformation_files = [
        {
            'tactic': 'Numbers and Nonsense',
            'description': 'A disinformation tactic that employs the misuse or fabrication of numerical data and '
                           'statistics to mislead or distort the truth. This tactic takes advantage of the '
                           'authoritative aura often associated with numbers and statistics to present misleading '
                           'narratives as factual and reliable.',
            'explanations': [
                '## Misleading with Magnitude:\n\n"Numbers and Nonsense" often involves presenting numbers out of context '
                'or exaggerating statistics to create a distorted view of reality. By manipulating the *percieved* scale '
                'or magnitude of data, disinformation can make issues seem more prevalent or severe than they actually are.',
                '## Fabricating Data:\n\nThis tactic includes the outright fabrication of data or statistics to support a '
                'false narrative. The numbers are presented as legitimate research findings to mislead the public and '
                'gain unwarranted credibility.',
                '## Appeal to Authority:\n\nBy citing statistics or data from seemingly authoritative sources without '
                'proper context or verification, disinformation campaigns can exploit the publicâ€™s trust in numbers as '
                'objective truth. This often involves quoting statistics from unknown or non-existent studies to lend '
                'false credibility to an argument.',
                '## Statistical Manipulation:\n\nThis technique involves the strategic manipulation of statistical '
                'methods to produce predetermined outcomes. Through selective use of outliers, inappropriate aggregation '
                'of data, or the misuse of statistical tests, disinformation campaigns can create misleading narratives '
                'that appear statistically sound. This manipulation distorts the true significance or relevance of the '
                'data, presenting a biased interpretation as an objective fact.',
                '## Cherry-picking Time Frames:\n\nDisinformation often involves selectively choosing specific time '
                'frames or periods that support a misleading narrative while ignoring broader or more relevant data sets. '
                'By focusing on short-term trends, anomalies, or specific instances where the data aligns with the desired '
                'message, this tactic misleadingly presents these instances as reflective of the norm. This approach '
                'exploits the variability inherent in any dataset to falsely imply trends or outcomes that are not '
                'representative of the overall data.',
            ],
            'path': './datasets/numbers_nonesense_mock_data.csv'
        },

    ]

    print('')

    for csv_dict in csv_disinformation_files:
        load_data_from_csv(csv_dict, csv_delimiter, source_url)
        path = csv_dict['path']
        print(f'Loaded data from {path}')


def reverse_population(apps, schema_editor):
    DisinformationTacticModel.objects.filter(name='Numbers and Nonsense').delete()


class Migration(migrations.Migration):

    dependencies = [
        ('prebunkapi', '0002_load_initial_data'),
    ]

    operations = [
        migrations.RunPython(load_data, reverse_code=reverse_population)
    ]
