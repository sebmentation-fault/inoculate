# Generated by Django 4.2.7 on 2024-02-25 18:57

from django.db import migrations

"""
This file is intended to be run when the server is started for the first time, and the database is empty.
It will populate the database with the necessary data (extracted from a CSV file) such that there is a range of option
selections, disinformation tactics, and tactic explanations.
"""

import csv
from random import randint
from prebunkapi.models.modles import (DisinformationTacticModel, OptionSelectionModel, OptionSelectionTacticModel,
                                      TacticExplainationModel)


def load_data_from_csv(csv_dict: dict, delimiter: str, source_url: str):
    with open(csv_dict['path'], 'r', encoding='utf-8') as file:
        reader = csv.DictReader(file, delimiter=delimiter)

        # Create the disinformation tactic model and the explanations for it
        disinformation_tactic = DisinformationTacticModel(
            name=csv_dict['tactic'],
            description=csv_dict['description'],
        )
        disinformation_tactic.save()

        for explanation in csv_dict['explanations']:
            tactic_explanation = TacticExplainationModel(
                disinformation_tactic=disinformation_tactic,
                explaination=f"# Tactic Explanation\n\n {explanation}",
            )
            tactic_explanation.save()

        for row in reader:
            # Create a new option selection model for each row
            # CSV format: information|source|correct_option|incorrect_option|display_not_sure|feedback

            random_difficulty = randint(80, 120)
            random_cost = randint(1, 3)

            feedback_str = row['feedback']

            option_selection = OptionSelectionModel(
                information=row['information'],
                source=row['source'],
                correct_option=row['correct_option'],
                incorrect_option=row['incorrect_option'],
                display_not_sure=True if row['display_not_sure'] == 'True' else False,
                feedback=f'# Feedback\n\n{feedback_str}',
                real_difficulty=random_difficulty,
                opportunity_cost=random_cost,
                source_url=source_url,
            )
            option_selection.save()

            option_selection_tactic = OptionSelectionTacticModel(
                option_selection=option_selection,
                disinformation_tactic=disinformation_tactic,
            )
            option_selection_tactic.save()


def load_data(apps, schema_editor):
    csv_delimiter = '|'
    source_url = 'https://chat.openai.com/'

    csv_disinformation_files = [
        {
            'tactic': 'Causality',
            'description': 'Causality is a disinformation tactic that involves making a false claim about the cause '
                           'of something.',
            'explanations': [
                'Causality disinformation suggests that because two events occur together, one must be the cause of the'
                'other, ignoring other possible explanations.',
                'It implies a direct cause-and-effect relationship where none has been proven, leading to misleading'
                'conclusions.',
                'Causality disinformation often overlooks complex factors, simplifying situations into misleading'
                'cause-and-effect scenarios.',
                'This tactic can make natural correlations appear as intentional actions, skewing public perception.',
                'It uses coincidental timing to imply a direct link, misleading audiences about the true nature of'
                'events.',
            ],
            'path': './datasets/causality_mock_data.csv'
        },
        {
            'tactic': 'Emotive Language',
            'description': 'Emotive language can be used to influence perception and decision making. It is a '
                           'disinformation tactic that involves using language that is designed to provoke an '
                           'emotional response.',
            'explanations': [
                'Emotive language in disinformation uses charged words to provoke strong emotional reactions, '
                'bypassing rational analysis.,'
                'It frames information in a way that appeals to fear, anger, or hope, influencing perceptions and '
                'decisions.',
                'This tactic can transform neutral facts into emotionally charged messages, altering their perceived '
                'importance or meaning.',
                'Emotive language exploits human psychology by connecting issues to personal identities or values, '
                'deepening divisions.',
                'It often presents scenarios in black-and-white terms, using emotional appeal to overshadow nuanced '
                'or complex realities.',
            ],
            'path': './datasets/emotive_mock_data.csv'
        },
        {
            'tactic': 'Selection Bias',
            'description': 'Selection bias is a disinformation tactic that involves cherry-picking data to support '
                           'a particular point of view.',
            'explanations': [
                'Selection bias in disinformation involves cherry-picking data or sources that support a false '
                'narrative while ignoring contradictory evidence.',
                'It presents a skewed view of reality by selecting only the information that aligns with a particular '
                'agenda.',
                'Selection bias can create a false impression of consensus or popularity by only showcasing '
                'supporting opinions.',
                'This tactic manipulates statistical outcomes by selectively choosing subjects or data sets that are '
                'not representative.',
                'It amplifies outlier opinions or events as if they were the norm, misleading about the true state of '
                'affairs.',
            ],
            'path': './datasets/selection_bias_mock_data.csv'
        },

    ]

    for csv_dict in csv_disinformation_files:
        load_data_from_csv(csv_dict, csv_delimiter, source_url)
        path = csv_dict['path']
        print(f'Loaded data from {path}')


def reverse_population(apps, schema_editor):
    DisinformationTacticModel.objects.filter(name='Causality').delete()
    DisinformationTacticModel.objects.filter(name='Emotive Language').delete()
    DisinformationTacticModel.objects.filter(name='Selection Bias').delete()


class Migration(migrations.Migration):

    dependencies = [
        ('prebunkapi', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(load_data, reverse_code=reverse_population)
    ]
